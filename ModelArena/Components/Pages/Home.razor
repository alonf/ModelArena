@page "/"
@inject AzureAIModelManager ModelManager
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="main-header">
        <h1>Model Arena</h1>
        <div class="menu">
            <button @onclick="ToggleMenu" class="menu-button">☰</button>
            <div class="menu-content @( _isMenuOpen ? "show" : "")">
                <button @onclick="OpenSetSystemPrompt">Set System Prompt</button>
                <button @onclick="OpenAbout">About</button>
            </div>
        </div>
    </div>

    @if (_isMenuOpen)
    {
        <div @onclick="CloseMenu" class="outside-click-detect"></div>
    }

    <!-- About Modal -->
    @if (_isAboutModalVisible)
    {
        <AboutModal OnClose="CloseAboutModal" />
    }

    <!-- System Prompt Modal -->
    @if (_isSystemPromptModalVisible)
    {
        <SystemPromptModal CurrentSystemPrompt="@_systemPrompt"
        OnSet="HandleSaveSystemPrompt"
        OnCancel="CloseSystemPromptModal" />
    }


    <!-- Two model chat components -->
    <div class="row chat-container">
        <div class="col chat-box">
            <ModelChatComponent @ref="_model1" Id="model1" AvailableModels="_availableModels" 
            OnModelChanged="HandleModelChanged"/>
        </div>
        <div class="col chat-box">
            <ModelChatComponent @ref="_model2" Id="model2" AvailableModels="_availableModels" 
            OnModelChanged="HandleModelChanged" />
        </div>
    </div>

    <!-- Global chat input -->
    <div class="mt-4">
        <GlobalChatComponent BroadcastMessage="SendToAllModels" ClearAll="ClearAllHistories" />
    </div>
</div>

@code {
    private const string LocalStorageKey = "SystemPrompt";
    private IList<string> _availableModels = [];
    private ModelChatComponent? _model1; // Reference to the first ModelChatComponent
    private ModelChatComponent? _model2; // Reference to the second ModelChatComponent
    private bool _isMenuOpen;
    private bool _isAboutModalVisible;
    private bool _isSystemPromptModalVisible;
    private bool _isInitialized;

    private const string DefaultSystemPrompt = "You are an AI assistant that provides information";
    private string _systemPrompt = DefaultSystemPrompt;

    private void ToggleMenu() => _isMenuOpen = !_isMenuOpen;

    protected override void OnInitialized()
    {
        _availableModels = ModelManager.GetModelNames();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            // Load the system prompt from local storage
            var storedPrompt = await JsRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
            if (!string.IsNullOrEmpty(storedPrompt))
            {
                _systemPrompt = storedPrompt;
                StateHasChanged(); // Re-render the component with the loaded value
            }

            _isInitialized = true; // Ensure this logic runs only once
        }
    }

    private async Task SendToAllModels(string message)
    {
        // Create tasks for sending messages to both models
        var tasks = new List<Task>();

        if (_model1 is not null)
        {
            tasks.Add(_model1.SendToModel(message));
        }

        if (_model2 is not null)
        {
            tasks.Add(_model2.SendToModel(message));
        }

        // Execute all tasks concurrently
        await Task.WhenAll(tasks);
    }


    private void ClearAllHistories()
    {
        _model1?.ClearModelHistory();
        _model2?.ClearModelHistory();
    }

    private void CloseMenu()
    {
        _isMenuOpen = false;
    }

    private void HandleModelChanged(string modelName)
    {
        if (string.IsNullOrEmpty(_systemPrompt))
            _systemPrompt = DefaultSystemPrompt;

        // Update the system prompt for both models
        if (_model1?.Id == modelName)
        {
            _model1?.SetSystemPrompt(_systemPrompt);
        }

        if (_model2?.Id == modelName)
        {
            _model2?.SetSystemPrompt(_systemPrompt);
        }

        Console.WriteLine($"System Prompt updated for model: {modelName}");
    }

    private void SetSystemPromptForAllModels()
    {
        // Call SetSystemPrompt on each model component
        _model1?.SetSystemPrompt(_systemPrompt);
        _model2?.SetSystemPrompt(_systemPrompt);

        Console.WriteLine($"System Prompt Set: {_systemPrompt}");
    }

    private async Task SaveSystemPromptToStorage()
    {
        // Save the system prompt to local storage
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, _systemPrompt);
    }

    private void OpenSetSystemPrompt()
    {
        _isSystemPromptModalVisible = true;
        CloseMenu();
    }

    private void CloseSystemPromptModal()
    {
        _isSystemPromptModalVisible = false;
    }

    private async Task HandleSaveSystemPrompt(string prompt)
    {
        _systemPrompt = prompt;
        await SaveSystemPromptToStorage(); 
        SetSystemPromptForAllModels();
        CloseSystemPromptModal();
    }

    private void OpenAbout()
    {
        CloseMenu();
        _isAboutModalVisible = true;
    }

    private void CloseAboutModal()
    {
        _isAboutModalVisible = false;
    }
}